// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  EMAIL
  GOOGLE
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Model {
  I2V_01_DIRECTOR
  I2V_01_LIVE
  I2V_01
}

model User {
  id         Int       @id @default(autoincrement())
  name       String    @map("name")
  email      String    @map("email")
  avatar     String?   @map("avatar")
  password   String?   @map("password")
  googleId   String?   @map("google_id")
  authType   AuthType? @map("auth_type")
  lastSignIn DateTime? @map("last_sign_in")

  // timestamps
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  userRoles                UserRole[]
  refreshTokens            RefreshToken[]
  jobQueues                JobQueue[] 
  videoResults             VideoResult[]  
  videoResultsMarked       VideoResult[] @relation("VideoResultsMarked")
  
  @@map("users")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @map("name")
  description String    @map("description")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  userRoles     UserRole[]
  permissions   RolePermission[]

  @@map("roles")
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  roleId    Int       @map("role_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model RolePermission {
  id           Int       @id @default(autoincrement())
  roleId       Int       @map("role_id")
  permissionId Int       @map("permission_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@map("role_permissions")
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @map("name")
  description String    @map("description")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  roles RolePermission[]

  @@map("permissions")
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  value     String    @map("value")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Account {
  id        Int       @id @default(autoincrement())
  email     String    @map("email")
  password  String    @map("password")
  cookie    String?    @map("cookie")
  browserProfile String? @map("browser_profile")
  categories  String?    @map("categories")
  isCookieActive Boolean @default(false) @map("is_cookie_active")
  lastLoginAt DateTime? @map("last_login_at")
  isActive Boolean @default(true) @map("is_active")
  lastOpenAt DateTime? @map("last_open_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  browserCache String?

  jobQueues JobQueue[]
  videoResults VideoResult[]

  @@map("accounts")
}

model JobQueue {
  id        Int       @id @default(autoincrement())
  imageUrl  String    @map("image_url")
  prompt    String    @map("prompt")
  status    QueueStatus @map("status")
  generateTimes Int @map("generate_times") @default(1)
  generatedTimes Int @map("generated_times") @default(0)
  accountId Int? @map("account_id")
  modelId String? @map("model_id")
  userId Int? @map("user_id")
  startAt DateTime? @map("start_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  account Account? @relation(fields: [accountId], references: [id])
  videoResults VideoResult[]
  user User? @relation(fields: [userId], references: [id])

  @@map("queues") 
}

model VideoResult {
  id        Int       @id @default(autoincrement())
  batchId   String    @map("batch_id")
  batchType Int    @map("batch_type")
  videoId   String    @map("video_id")
  description String  @map("description")
  coverUrl  String    @map("cover_url")
  videoUrl  String    @map("video_url")
  downloadUrl String?  @map("download_url")
  createTime String? @map("create_time")
  status    Int       @map("status")
  width     Int       @map("width")
  height    Int       @map("height")
  hasVoice  Boolean   @map("has_voice")
  message   String?   @map("message")
  modelId   String    @map("model_id")
  userId    String    @map("user_id")
  createType Int      @map("create_type")
  promptImgUrl String? @map("prompt_img_url")
  extra     Json?     @map("extra")
  accountId Int?     @map("account_id")
  jobQueueId Int?     @map("job_queue_id")
  creatorId Int?     @map("creator_id")
  note String? @map("note")
  isMarked Boolean @default(false) @map("is_marked")
  markedById Int? @map("marked_by_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  jobQueue JobQueue? @relation(fields: [jobQueueId], references: [id])
  account Account? @relation(fields: [accountId], references: [id])
  user User? @relation(fields: [creatorId], references: [id])
  markedBy User? @relation("VideoResultsMarked", fields: [markedById], references: [id])

  @@map("video_results")
}
