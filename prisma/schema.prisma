// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthType {
  EMAIL
  GOOGLE
}

model User {
  id         Int       @id @default(autoincrement())
  name       String    @map("name")
  email      String    @map("email")
  avatar     String?   @map("avatar")
  password   String?   @map("password")
  credits    Int?      @default(0) @map("credits")
  roleId     Int?      @map("role_id")
  googleId   String?   @map("google_id")
  authType   AuthType? @map("auth_type")
  lastSignIn DateTime? @map("last_sign_in")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  role                     Role?                     @relation("UserRole", fields: [roleId], references: [id])
  userRoles                UserRole[]
  refreshTokens            RefreshToken[]

  @@map("users")
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String    @map("name")
  description String    @map("description")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  users         User[]             @relation("UserRole")
  userRoles     UserRole[]
  permissions   RolePermission[]

  @@map("roles")
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  roleId    Int       @map("role_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model RolePermission {
  id           Int       @id @default(autoincrement())
  roleId       Int       @map("role_id")
  permissionId Int       @map("permission_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@map("role_permissions")
}

model Permission {
  id          Int       @id @default(autoincrement())
  name        String    @map("name")
  description String    @map("description")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  roles RolePermission[]

  @@map("permissions")
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  value     String    @map("value")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}


// // youtube channel entity
// model YoutubeChannel {
//   id        Int       @id @default(autoincrement())
//   name      String    @map("name")
//   url       String    @map("url")
//   accessToken String @map("access_token") 
//   refreshToken String @map("refresh_token")
//   channelId String @map("channel_id")
//   userId Int @map("user_id")
//   refreshTokenExpiry DateTime @map("refresh_token_expiry")
//   accessTokenExpiry DateTime @map("access_token_expiry")
//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime? @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")
// }

// //youtube channel analytics 
// model YoutubeChannelAnalytics { 
//   id Int @id @default(autoincrement())
//   channelId String @map("channel_id")
//   userId Int @map("user_id")
//   analyticsData Json @map("analytics_data")
//   date DateTime @map("date")
//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime? @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")
// }

